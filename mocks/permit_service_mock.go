// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\MSamsan1\projects\test_framework\mcp_iam\internal\permit\permit_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPermitService is a mock of PermitService interface.
type MockPermitService struct {
	ctrl     *gomock.Controller
	recorder *MockPermitServiceMockRecorder
}

// MockPermitServiceMockRecorder is the mock recorder for MockPermitService.
type MockPermitServiceMockRecorder struct {
	mock *MockPermitService
}

// NewMockPermitService creates a new mock instance.
func NewMockPermitService(ctrl *gomock.Controller) *MockPermitService {
	mock := &MockPermitService{ctrl: ctrl}
	mock.recorder = &MockPermitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermitService) EXPECT() *MockPermitServiceMockRecorder {
	return m.recorder
}

// APIExecute mocks base method.
func (m *MockPermitService) APIExecute(ctx context.Context, method, endpoint string, payload interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIExecute", ctx, method, endpoint, payload)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIExecute indicates an expected call of APIExecute.
func (mr *MockPermitServiceMockRecorder) APIExecute(ctx, method, endpoint, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIExecute", reflect.TypeOf((*MockPermitService)(nil).APIExecute), ctx, method, endpoint, payload)
}

// ExecuteGetAPI mocks base method.
func (m *MockPermitService) ExecuteGetAPI(ctx context.Context, method, endpoint string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetAPI", ctx, method, endpoint)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetAPI indicates an expected call of ExecuteGetAPI.
func (mr *MockPermitServiceMockRecorder) ExecuteGetAPI(ctx, method, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetAPI", reflect.TypeOf((*MockPermitService)(nil).ExecuteGetAPI), ctx, method, endpoint)
}

// GetSingleResource mocks base method.
func (m *MockPermitService) GetSingleResource(ctx context.Context, method, endpoint string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleResource", ctx, method, endpoint)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleResource indicates an expected call of GetSingleResource.
func (mr *MockPermitServiceMockRecorder) GetSingleResource(ctx, method, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleResource", reflect.TypeOf((*MockPermitService)(nil).GetSingleResource), ctx, method, endpoint)
}

// SendRequest mocks base method.
func (m *MockPermitService) SendRequest(ctx context.Context, method, endpoint string, payload interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, method, endpoint, payload)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockPermitServiceMockRecorder) SendRequest(ctx, method, endpoint, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockPermitService)(nil).SendRequest), ctx, method, endpoint, payload)
}
